CHIP P2S {
    IN indata[4], enable, load;
    OUT sout, complete;

    PARTS:
    // Store each bit of the input data into separate 1-bit registers
    Register(in=indata[0], load=load, out=bit0);
    Register(in=indata[1], load=load, out=bit1);
    Register(in=indata[2], load=load, out=bit2);
    Register(in=indata[3], load=load, out=bit3);

    // Bit 0 of the counter
    Not(in=count0, out=count0not);
    Register(in=count0not, load=enable, out=count0);

    // Bit 1 of the counter (increment only when count0 flips from 1 to 0)
    And(a=count0not, b=enable, out=inc1);
    Not(in=count1, out=count1not);
    Register(in=count1not, load=inc1, out=count1);

    // Use nested Muxes to select which bit to output based on counter
    Mux(a=bit0, b=bit1, sel=count0, out=out01);
    Mux(a=bit2, b=bit3, sel=count0, out=out23);
    Mux(a=out01, b=out23, sel=count1, out=sout);

    // complete = 1 only when counter == 3 and enable == 1
    And(a=count0, b=count1, out=lastCount);
    And(a=lastCount, b=enable, out=complete);
}
