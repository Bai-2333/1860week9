CHIP P2S {
    IN indata[4], enable, load;
    OUT sout, complete;

    PARTS:
    // Store each bit of the input when 'load' is high
    Register(in=indata[0], load=load, out=bit0);
    Register(in=indata[1], load=load, out=bit1);
    Register(in=indata[2], load=load, out=bit2);
    Register(in=indata[3], load=load, out=bit3);

    // First bit of the 2-bit counter
    Not(in=counter0, out=counter0not);
    Register(in=counter0not, load=enable, out=counter0);

    // Second bit of the counter (toggle when counter0 changes from 1->0)
    And(a=counter0not, b=enable, out=inc1);
    Not(in=counter1, out=counter1not);
    Register(in=counter1not, load=inc1, out=counter1);

    // Use nested Mux to select which bit to output
    Mux(a=bit0, b=bit1, sel=counter0, out=sel01);
    Mux(a=bit2, b=bit3, sel=counter0, out=sel23);
    Mux(a=sel01, b=sel23, sel=counter1, out=sout);

    // complete = 1 only when counter == 3 and enable == 1
    And(a=counter0, b=counter1, out=lastBit);
    And(a=lastBit, b=enable, out=complete);
}
